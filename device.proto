// Copyright (c) 2024 netdeployonnx contributors.
//
// This file is part of netdeployonx.
// See https://github.com/ekut-es/netdeployonnx for further info.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package device;

enum Payload_Datatype {
    none = 0;
    exception = 1;
    onnx = 2;
    onnxb = 3;
    dict = 4;
    json = 5;
}

message DeviceHandle {
    string handle = 1;//uuid-128
}

message DeviceInfo {
    string port = 1;
    string model = 2;
    string manufacturer = 3;
    string firmware_version = 4;
}

message Payload {
    string run_id = 1;
    Payload_Datatype datatype = 2;
    bytes data = 3;
}


//

service DeviceService {
    rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {}
    rpc GetDeviceHandle(GetDeviceHandleRequest) returns (GetDeviceHandleResponse) {}
    rpc FreeDeviceHandle(FreeDeviceHandleRequest) returns (FreeDeviceHandleResponse) {}
    rpc GetDeviceInfo(GetDeviceInfoRequest) returns (GetDeviceInfoResponse) {}

    // missing: prepare, profile

    rpc RunPayloadSynchronous(RunPayloadRequest) returns (RunPayloadResponse) {}

    rpc RunPayloadAsynchronous(RunPayloadRequest) returns (RunPayloadResponse) {}
    rpc CheckPayloadAsynchronous(CheckPayloadRequest) returns (CheckPayloadResponse) {}

}


message ListDevicesRequest {
}

message ListDevicesResponse {
    repeated DeviceInfo devices = 1;
}

message GetDeviceHandleRequest {
    repeated DeviceInfo filters = 1;
}

message GetDeviceHandleResponse {
    DeviceHandle deviceHandle = 1;
}


message FreeDeviceHandleRequest {
    DeviceHandle deviceHandle = 1;
}


message FreeDeviceHandleResponse {
    bool ok = 1;
}

message RunPayloadRequest {
    // TODO: send a model?
    DeviceHandle deviceHandle = 1;
    Payload payload = 2;
    Payload inputs = 3;
}

message RunPayloadResponse {
    Payload payload = 1;
    string run_id = 2;
}

message CheckPayloadRequest {
    string run_id = 1;
}

message CheckPayloadResponse {
    Payload payload = 1;
}

message GetDeviceInfoRequest {
    DeviceHandle deviceHandle = 1;
}
message GetDeviceInfoResponse {
    DeviceInfo device = 1;
}
